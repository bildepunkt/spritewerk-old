{
  "name": "Spritewerk",
  "tagline": "A small, friendly HTML5 framework for device-agnostic game development",
  "body": "Spritewerk\r\n==========\r\n\r\n[![Build Status](https://travis-ci.org/c-concat-p/spritewerk.svg?branch=master)](https://travis-ci.org/c-concat-p/spritewerk)\r\n[![Coverage Status](https://coveralls.io/repos/github/c-concat-p/spritewerk/badge.svg?branch=master&stopCachingBadges=true)](https://coveralls.io/github/c-concat-p/spritewerk?branch=master&stopCachingBadges=true)\r\n\r\n### A small, friendly HTML5 framework for device-agnostic game development\r\nSpritewerk is a lightweight, fun and easy-to-use solution for producing traditional, console-style games that perform beautifully on any device. The code consists of flexible, generic classes for rapidly developing an HTML5 game.\r\n\r\nDoes not support:\r\n\r\n* physics\r\n* nested transforms\r\n\r\n#### To install\r\n    git clone https://github.com/c-concat-p/spritewerk.git\r\n\r\nor download archive [here](https://github.com/c-concat-p/spritewerk/archive/master.zip).\r\n\r\n#### To Use\r\n**ES(6/2015/next)**\r\n`import` classes from `./src` as needed.\r\n\r\n**ES5**\r\nRun `npm run xpile`, then `require` modules from `./xpile` as needed.\r\n\r\n**Playground**\r\nWant to play with Spritewerk right away? To set up a rather bare-bones development environment run `mkdir -p ./playground && touch ./playground/index.html && touch ./playground/main.js`, and then watch for `main.js` changes via webpack with:\r\n\r\n    npm run webpack\r\n\r\nHere is an example main.js file to get you started:\r\n\r\n    import Camera from '../src/Camera';\r\n    import Canvas from '../src/Canvas';\r\n    import Stage from '../src/Stage';\r\n    import Rectangle from '../src/shape/Rectangle';\r\n    import Ticker from '../src/Ticker';\r\n\r\n    const WIDTH = 800;\r\n    const HEIGHT = 600;\r\n\r\n    let camera = new Camera();\r\n    let stage = new Stage(WIDTH, HEIGHT, {\r\n        bgColor: '#222',\r\n        fill: true\r\n    });\r\n    let canvas = new Canvas(stage.getCanvas(), camera);\r\n    let rect = new Rectangle()\r\n        .setWidth(64)\r\n        .setHeight(64)\r\n        .setX(600);\r\n    let ticker = new Ticker();\r\n    let vx = 4;\r\n    let vy = 4;\r\n\r\n    ticker.onTick = function () {\r\n        if (rect.getX() < 0) {\r\n            vx = 4;\r\n        }\r\n        if (rect.getX() + rect.getWidth() > WIDTH) {\r\n            vx = -4; \r\n        }\r\n        if (rect.getY() < 0) {\r\n            vy = 4;\r\n        }\r\n        if (rect.getY() + rect.getHeight() > HEIGHT) {\r\n            vy = -4;\r\n        }\r\n\r\n        canvas.clear(\"#DDD\");\r\n        rect.translate(vx, vy);\r\n        canvas.render(rect);\r\n    };\r\n\r\n\r\n#### Test\r\nTo run Spritewerk's unit tests, first run `npm run xpile` and then:\r\n\r\n    npm run test\r\n\r\n#### Documentation\r\nGenerate the documentation.\r\n\r\n    npm run doc\r\n\r\n#### Build\r\n(Not for running locally) Jenkins build with code coverage via Coveralls/Istanbul configuration\r\n\r\n    npm run build\r\n\r\n#### TODO\r\n* support calculating entity's bounding area/position when rotated on an offset pivot\r\n* support clipping objects\r\n* copy camera ideas over from ghastlyjs\r\n* use data/state scaffolding again?\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}